use alloy_dyn_abi::DynSolType;
use alloy_primitives::{hex::FromHex, Bytes, U256};
use evm_glue::opcodes::Opcode;
use lalrpop_util::ParseError;
use std::str::FromStr;
use crate as ast;
use crate::parser::{u256_as_push, u256_as_push_data};

grammar;

extern {
    type Error = ast::Error;
}

pub Root: ast::Root<'input> = {
    <def:Definition*> => ast::Root(def.into_iter().collect()),
};

pub Definition: ast::Definition<'input> = {
    "#define" <m:Macro> => m,
    "#define" <c:Constant> => c,
    "#define" <t:Table> => t,
    "#define" <f:SolFunction> => f,
    "#define" <e:SolEvent> => e,
    "#define" <e:SolError> => e,
};

pub Macro: ast::Definition<'input> = {
    "macro" <name:Spanned<IDENT>> <args:MacroArgs>
        "=" <tr:("takes" "(" DEC ")" "returns" "(" DEC ")")?>
        "{" <stmts:Spanned<MacroStatement>*> "}"
    => {
        let takes_returns = if let Some((_, _, takes, _, _, _, returns, _)) = tr {
            Some((takes.parse::<usize>().unwrap(), returns.parse::<usize>().unwrap()))
        } else {
            None
        };
        ast::Definition::Macro(ast::Macro{ name, args, takes_returns, body: stmts.into_boxed_slice() })
    }
};

pub MacroArgs: Box<[(ast::Span, &'input str)]> = {
    "(" ")" => Box::new([]),
    "(" <first:Spanned<IDENT>> <rest:("," Spanned<IDENT>)*> ")" => {
        let mut list = vec![first];
        list.extend(rest.into_iter().map(|(_, t)| t));
        list.into_boxed_slice()
    }
};

pub MacroStatement: ast::MacroStatement<'input> = {
    <label:IDENT> ":" => ast::MacroStatement::LabelDefinition(label),
    <inst:Instruction> => ast::MacroStatement::Instruction(inst),
    <invoke:Invoke> => ast::MacroStatement::Invoke(invoke),
};

pub Instruction: ast::Instruction<'input> = {
    <word:Word> => ast::Instruction::Op(u256_as_push(word)),
    "push1"  <word:Word> =>? u256_as_push_data::<1>(word).map(Opcode::PUSH1).map(ast::Instruction::Op),
    "push2"  <word:Word> =>? u256_as_push_data::<2>(word).map(Opcode::PUSH2).map(ast::Instruction::Op),
    "push3"  <word:Word> =>? u256_as_push_data::<3>(word).map(Opcode::PUSH3).map(ast::Instruction::Op),
    "push4"  <word:Word> =>? u256_as_push_data::<4>(word).map(Opcode::PUSH4).map(ast::Instruction::Op),
    "push5"  <word:Word> =>? u256_as_push_data::<5>(word).map(Opcode::PUSH5).map(ast::Instruction::Op),
    "push6"  <word:Word> =>? u256_as_push_data::<6>(word).map(Opcode::PUSH6).map(ast::Instruction::Op),
    "push7"  <word:Word> =>? u256_as_push_data::<7>(word).map(Opcode::PUSH7).map(ast::Instruction::Op),
    "push8"  <word:Word> =>? u256_as_push_data::<8>(word).map(Opcode::PUSH8).map(ast::Instruction::Op),
    "push9"  <word:Word> =>? u256_as_push_data::<9>(word).map(Opcode::PUSH9).map(ast::Instruction::Op),
    "push10" <word:Word> =>? u256_as_push_data::<10>(word).map(Opcode::PUSH10).map(ast::Instruction::Op),
    "push11" <word:Word> =>? u256_as_push_data::<11>(word).map(Opcode::PUSH11).map(ast::Instruction::Op),
    "push12" <word:Word> =>? u256_as_push_data::<12>(word).map(Opcode::PUSH12).map(ast::Instruction::Op),
    "push13" <word:Word> =>? u256_as_push_data::<13>(word).map(Opcode::PUSH13).map(ast::Instruction::Op),
    "push14" <word:Word> =>? u256_as_push_data::<14>(word).map(Opcode::PUSH14).map(ast::Instruction::Op),
    "push15" <word:Word> =>? u256_as_push_data::<15>(word).map(Opcode::PUSH15).map(ast::Instruction::Op),
    "push16" <word:Word> =>? u256_as_push_data::<16>(word).map(Opcode::PUSH16).map(ast::Instruction::Op),
    "push17" <word:Word> =>? u256_as_push_data::<17>(word).map(Opcode::PUSH17).map(ast::Instruction::Op),
    "push18" <word:Word> =>? u256_as_push_data::<18>(word).map(Opcode::PUSH18).map(ast::Instruction::Op),
    "push19" <word:Word> =>? u256_as_push_data::<19>(word).map(Opcode::PUSH19).map(ast::Instruction::Op),
    "push20" <word:Word> =>? u256_as_push_data::<20>(word).map(Opcode::PUSH20).map(ast::Instruction::Op),
    "push21" <word:Word> =>? u256_as_push_data::<21>(word).map(Opcode::PUSH21).map(ast::Instruction::Op),
    "push22" <word:Word> =>? u256_as_push_data::<22>(word).map(Opcode::PUSH22).map(ast::Instruction::Op),
    "push23" <word:Word> =>? u256_as_push_data::<23>(word).map(Opcode::PUSH23).map(ast::Instruction::Op),
    "push24" <word:Word> =>? u256_as_push_data::<24>(word).map(Opcode::PUSH24).map(ast::Instruction::Op),
    "push25" <word:Word> =>? u256_as_push_data::<25>(word).map(Opcode::PUSH25).map(ast::Instruction::Op),
    "push26" <word:Word> =>? u256_as_push_data::<26>(word).map(Opcode::PUSH26).map(ast::Instruction::Op),
    "push27" <word:Word> =>? u256_as_push_data::<27>(word).map(Opcode::PUSH27).map(ast::Instruction::Op),
    "push28" <word:Word> =>? u256_as_push_data::<28>(word).map(Opcode::PUSH28).map(ast::Instruction::Op),
    "push29" <word:Word> =>? u256_as_push_data::<29>(word).map(Opcode::PUSH29).map(ast::Instruction::Op),
    "push30" <word:Word> =>? u256_as_push_data::<30>(word).map(Opcode::PUSH30).map(ast::Instruction::Op),
    "push31" <word:Word> =>? u256_as_push_data::<31>(word).map(Opcode::PUSH31).map(ast::Instruction::Op),
    "push32" <word:Word> =>? u256_as_push_data::<32>(word).map(Opcode::PUSH32).map(ast::Instruction::Op),
    <id:IDENT> => {
        if let Ok(op) = Opcode::from_str(id) {
             ast::Instruction::Op(op)
        }else {
            ast::Instruction::LabelReference(id)
        }
    },
    "<" <referenc:IDENT> ">" => ast::Instruction::MacroArgReference(referenc),
    "[" <referenc:IDENT> "]" => ast::Instruction::ConstantReference(referenc),
}

pub Invoke: ast::Invoke<'input> = {
    <name:Spanned<IDENT>> <args:InvokeMacroArgs> => ast::Invoke::Macro{ name, args },
    "__tablestart" "(" <arg:IDENT> ")" => ast::Invoke::BuiltinTableStart(arg),
    "__tablesize" "(" <arg:IDENT> ")" => ast::Invoke::BuiltinTableSize(arg),
    "__codesize" "(" <arg:IDENT> ")" => ast::Invoke::BuiltinCodeSize(arg),
    "__codeoffset" "(" <arg:IDENT> ")" => ast::Invoke::BuiltinCodeOffset(arg),
    "__FUNC_SIG" "(" <arg:IDENT> ")" => ast::Invoke::BuiltinFuncSig(arg),
    "__EVENT_HASH" "(" <arg:IDENT> ")" => ast::Invoke::BuiltinEventHash(arg),
    "__ERROR" "(" <arg:IDENT> ")" => ast::Invoke::BuiltinError(arg),
};

pub InvokeMacroArgs: Box<[(ast::Span, ast::Instruction<'input>)]> = {
    "(" ")" => Box::new([]),
    "(" <first:Spanned<Instruction>> <rest:("," Spanned<Instruction>)*> ")" => {
        let mut list = vec![first];
        list.extend(rest.into_iter().map(|(_, t)| t));
        list.into_boxed_slice()
    }
}

pub Constant: ast::Definition<'input> = {
    "constant" <name:Spanned<IDENT>> "=" <value:Word> => ast::Definition::Constant { name, value }
};

pub Table: ast::Definition<'input> = {
    "table" <name:Spanned<IDENT>> "{" <code:Code+> "}" => {
        let data = code.into_iter().flatten().collect::<Vec<u8>>().into_boxed_slice();
        ast::Definition::Codetable { name, data }
    },
};

pub SolFunction: ast::Definition<'input> = {
    "function" <name:IDENT> <args:SolTypeList> <rets:("returns" SolTypeList)?> => {
        let rets = rets.map(|(_, t)| t).unwrap_or_else(|| Box::new([]));
        ast::Definition::SolFunction(ast::SolFunction{ name, args, rets })
    }
};

pub SolEvent: ast::Definition<'input> = {
    "event" <name:IDENT> <args:SolTypeList> => ast::Definition::SolEvent(ast::SolEvent{ name, args })
};

pub SolError: ast::Definition<'input> = {
    "error" <name:IDENT> <args:SolTypeList> => ast::Definition::SolError(ast::SolError{ name, args })
};

pub SolTypeList: Box<[DynSolType]> = {
    "(" ")" => Box::new([]),
    "(" <first:SolType> <rest:("," SolType)*>  ")" => {
        let mut list = vec![first];
        list.extend(rest.into_iter().map(|(_, t)| t));
        list.into_boxed_slice()
    }
};

pub SolType: DynSolType = {
    <t:SolRawType> =>? DynSolType::parse(&t).map_err(|e| ParseError::User { error: ast::Error::InvalidSolType(e) })
};

pub SolRawType: String = {
    <t:SolRawPrimitiveType> <ex:("[" DEC? "]")?> IDENT? => {
        let mut result = t.to_string();
        if let Some(ex) = ex {
            result.push_str(ex.0);
            if let Some(num) = ex.1 {
                result.push_str(num);
            }
            result.push_str(ex.2);
        }
        result
    },
    <t:SolRawTupleType> <ex:("[" DEC? "]")?> IDENT? => {
        let mut result = t.to_string();
        if let Some(ex) = ex {
            result.push_str(ex.0);
            if let Some(num) = ex.1 {
                result.push_str(num);
            }
            result.push_str(ex.2);
        }
        result
    },
};

pub SolRawPrimitiveType: &'input str = {
    <t:IDENT> => t
};

pub SolRawTupleType: String = {
    "(" <fist:SolRawType> <rest:("," SolRawType)*> ")" => {
        let mut result = "(".to_string();
        result.push_str(&fist);
        rest.into_iter().for_each(|(_, t)| {
            result.push_str(",");
            result.push_str(&t);
        });
        result.push_str(")");
        result
    }
}

pub Word: U256 = {
    <s:HEX> =>? U256::from_str_radix(&s[2..], 16).map_err(|e| {
        ParseError::User { error: ast::Error::WordOverflow(e) }
    }),
    <s:BIN> =>? U256::from_str_radix(&s[2..], 2).map_err(|e| {
        ParseError::User { error: ast::Error::WordOverflow(e) }
    }),
    <s:DEC> =>? U256::from_str_radix(s, 10).map_err(|e| {
        ParseError::User { error: ast::Error::WordOverflow(e) }
    }),
};

pub Code: Vec<u8> = {
    <s:HEX> =>? Bytes::from_hex(s)
        .map(|b| b.to_vec())
        .map_err(|e| ParseError::User{ error: ast::Error::BytesOddLength(e) })
}

Spanned<T>: (ast::Span, T) = {
    <start: @L> <inner: T> <end: @R> => (start..end, inner)
}

match {
    r"\s+" => {},                  // whitespace
    r"//[^\n\r]*[\n\r]*" => {},    // single-line comments
    r"/\*([^*]|\*[^/])*\*/" => {}, // multi-line comments

    r"[a-zA-Z_][a-zA-Z0-9_]*" => IDENT, // identifier

    r"0|[1-9][0-9]*" => DEC, // decimal number
    r"0x[0-9a-f]+" => HEX,   // hexadecimal number
    r"0b[01]+" => BIN,       // binary number

    _
}
